{"version":3,"sources":["selectors/story.js","components/Button.tsx","components/ButtonInline.tsx","components/Story.tsx","actions/archive.ts","constants/actionTypes.tsx","components/Stories.tsx","components/SearchStories.tsx","actions/story.ts","components/App.tsx","reducers/story.ts","reducers/archive.ts","reducers/index.ts","api/story.ts","sagas/story.ts","sagas/index.ts","store/index.ts","serviceWorker.js","index.tsx"],"names":["getReadableStories","archivedIds","storyState","archiveState","stories","filter","story","indexOf","objectID","Button","onClick","className","children","type","ButtonInline","connect","dispatch","onArchive","id","doArchiveStory","columns","title","url","author","num_comments","points","style","width","href","comments","archive","COLUMNS","label","StoriesHeader","key","state","error","map","SearchStories","props","onChange","bind","onSubmit","query","event","this","onFetchStories","setState","preventDefault","value","target","React","doFetchStories","App","INITIAL_STATE","applyAddStories","action","applyFetchErrorStories","storyReducer","applyArchiveStory","archiveReducer","rootReducer","combineReducers","fetchStories","fetch","then","response","json","handleFetchStories","call","result","put","hits","watchAll","all","takeEvery","logger","createLogger","saga","createSagaMiddleware","store","createStore","undefined","applyMiddleware","run","rootSaga","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eda52043.chunk.js","sourcesContent":["const isNotArchived = archivedIds => story =>\n  archivedIds.indexOf(story.objectID) === -1;\n\nconst getReadableStories = ({ storyState, archiveState }) =>\n  storyState.stories.filter(isNotArchived(archiveState));\n\nconst getFetchError = ({ storyState }) =>\n  storyState.error;\n\n  export {\n    getReadableStories,\n    getFetchError,\n  };\n","import React, { FunctionComponent } from 'react';\n\ntype ButtonProps = {\n  onClick?(e: React.MouseEvent<any>): any;\n  className?: string;\n  type?: any;\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({onClick, className, children, type = \"submit\"}) =>\n  <button type={type} className={className} onClick={onClick}>\n    {children}\n  </button>\n\n  export default Button;\n","import React from 'react';\nimport Button from './Button';\n\ntype ButtonInlineProps = {\n  onClick?(e: React.MouseEvent<any>): any;\n}\n\nconst ButtonInline: React.FC<ButtonInlineProps> = ({onClick, children }) =>\n  <Button className=\"button-inline\" onClick={onClick}>\n    {children}\n  </Button>\n\n  export default ButtonInline;\n","import React from 'react';\nimport './Story.css';\nimport ButtonInline from './ButtonInline';\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\n\ntype StoryProps = {\n  story: any;\n  columns: any;\n  onArchive: any;\n}\n\nconst Story: React.FC<StoryProps> = ({ story, columns, onArchive}) => {\n  const {\n    title,\n    url,\n    author,\n    num_comments,\n    points,\n    objectID,\n  } = story;\n\n  return (\n    <div className='story'>\n      <span style={{ width: columns.title.width}}>\n        <a href={url}>{title}</a>\n      </span>\n      <span style={{ width: columns.author.width}}>\n        {author}\n      </span>\n      <span style={{ width: columns.comments.width}}>\n        {num_comments}\n        </span>\n      <span style={{ width: columns.points.width}}>\n        {points}\n      </span>\n      <span style={{ width: columns.archive.width}}>\n        <ButtonInline onClick={() => onArchive(objectID)}>\n          Archive\n        </ButtonInline>\n      </span>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onArchive: (id: string) => dispatch(doArchiveStory(id)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Story);\n","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nexport const doArchiveStory = (id: string) => {\n   return {type: STORY_ARCHIVE, id}\n};\n","export const STORY_ARCHIVE = 'STORY_ARCHIVE';\nexport type STORY_ARCHIVE = typeof STORY_ARCHIVE;\n\nexport const STORIES_FETCH = 'STORIES_FETCH';\nexport type STORIES_FETCH = typeof STORIES_FETCH;\n\nexport const STORIES_ADD = 'STORIES_ADD';\nexport type STORIES_ADD = typeof STORIES_ADD;\n\nexport const STORIES_FETCH_ERROR = 'STORIES_FETCH_ERROR';\nexport type STORIES_FETCH_ERROR = typeof STORIES_FETCH_ERROR;\n","import React from 'react';\nimport './Stories.css';\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\nimport { getReadableStories, getFetchError } from '../selectors/story';\n\nimport Story from './Story';\n\nconst COLUMNS = {\n  title: {\n    label: \"Title\",\n    width: '40%',\n  },\n  author: {\n    label: 'Author',\n    width: '20%',\n  },\n  comments: {\n    label: 'Comments',\n    width: '20%',\n  },\n  points : {\n    label: 'Points',\n    width: '10%',\n  },\n  archive: {\n    width: '10%',\n  },\n};\n\ntype StoriesProps = {\n  stories: any;\n  error: unknown;\n}\n\nconst Stories: React.FC<StoriesProps> = ({ stories, error }) =>\n<div className=\"stories\">\n  <StoriesHeader columns={COLUMNS}/>\n\n    { error && <p className=\"error\">Something went wrong ...</p> }\n\n    {(stories || []).map((story: any) =>\n      <Story\n        key={story.objectID}\n        story={story}\n        columns={COLUMNS}\n      />\n    )}\n  </div>\n\ntype StoriesHeaderProps = {\n  columns: any;\n}\n\nconst StoriesHeader: React.FC<StoriesHeaderProps> = ({ columns }) =>\n  <div className='stories-header'>\n      <span key={'title'} style={{width:'40%'}}>Title</span>\n      <span key={'author'} style={{width:'20%'}}>Author</span>\n      <span key={'comments'} style={{width:'20%'}}>Comments</span>\n      <span key={'title'} style={{width:'10%'}}></span>\n  </div>\n\n  const mapStateToProps = (state: any) => ({\n    stories: getReadableStories(state),\n    error: getFetchError(state),\n  });\n\nexport default connect(\n  mapStateToProps,\n)(Stories);\n","import  * as React from 'react';\nimport { connect } from 'react-redux';\nimport { doFetchStories } from '../actions/story';\nimport  Button  from './Button';\n\ninterface SearchStoriesProps {\n  onFetchStories: any;\n}\n\ninterface SearchStoriesState {\n  query: string;\n}\n\nclass SearchStories extends React.Component<SearchStoriesProps, SearchStoriesState> {\n  constructor(props: any) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      query: '',\n    };\n  }\n\n  onSubmit(event: any) {\n    const  {query}  = this.state;\n    if (query) {\n      this.props.onFetchStories(query);\n      this.setState({query: '' });\n    }\n\n    event.preventDefault();\n  }\n\n  onChange(event: any) {\n    const {value} = event.target;\n    this.setState({ query: value});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          value={this.state.query}\n          onChange={this.onChange}\n        />\n        <Button type=\"submit\">\n          Search\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onFetchStories: (query: any) => dispatch(doFetchStories(query)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchStories);\n","import { STORIES_ADD, STORIES_FETCH, STORIES_FETCH_ERROR } from '../constants/actionTypes';\n\nconst doAddStories = (stories: HTMLElement) => {\n  return {type: STORIES_ADD, stories}\n};\n\nconst doFetchStories = (query: string) => {\n  return {type: STORIES_FETCH, query}\n};\n\nconst doFetchErrorStories = (error: unknown) => {\n  return {type: STORIES_FETCH_ERROR, error}\n}\n\nexport { doAddStories, doFetchStories, doFetchErrorStories };\n","import * as React from 'react'\nimport './App.css'\nimport Stories from './Stories'\nimport SearchStories from './SearchStories'\n\nexport const App: React.FC = () => (\n  <div className=\"app\">\n    <div className='interactions'>\n      <SearchStories />\n    </div>\n    <Stories />\n  </div>\n)\n","import { STORIES_ADD, STORIES_FETCH_ERROR } from '../constants/actionTypes';\n\nexport interface STATE_TYPE {\n  stories: any[];\n  error: unknown;\n}\n\nconst INITIAL_STATE = {\n  stories: [],\n  error: null,\n};\n\nconst applyAddStories = (state: STATE_TYPE, action: any) => ({\n  stories: action.stories,\n  error: null,\n});\n\nconst applyFetchErrorStories = (state: STATE_TYPE, action: any) => ({\n  stories: [],\n  error: action.error,\n});\n\nfunction storyReducer(state = INITIAL_STATE, action: any) {\n  switch(action.type) {\n    case STORIES_ADD : {\n      return applyAddStories(state, action);\n    }\n    case STORIES_FETCH_ERROR : {\n      return applyFetchErrorStories(state, action);\n    }\n    default : return state;\n  }\n}\n\nexport default storyReducer;\n","import { STORY_ARCHIVE }  from '../constants/actionTypes';\n//import { STATE_TYPE } from './story'\n\nconst INITIAL_STATE: any[] = [];\n\nconst applyArchiveStory = (state = INITIAL_STATE, action: any) =>\n  [ ...state, action.id];\n\nfunction archiveReducer(state = INITIAL_STATE, action: any) {\n  switch(action.type) {\n    case STORY_ARCHIVE : {\n      return applyArchiveStory(state, action,);\n    }\n    default : return state;\n  }\n}\n\nexport default archiveReducer;\n","import { combineReducers } from 'redux';\nimport storyReducer from './story';\nimport archiveReducer from './archive';\n\nconst rootReducer = combineReducers({\n  storyState: storyReducer,\n  archiveState: archiveReducer,\n});\n\nexport default rootReducer;\n","const HN_BASE_URL = 'https://hn.algolia.com/api/v1/search?query=';\n\nconst fetchStories = (query: string) =>\n  fetch(HN_BASE_URL + query)\n    .then(response => response.json());\n\nexport { fetchStories };\n","import { call, put } from 'redux-saga/effects';\nimport { doAddStories, doFetchErrorStories } from '../actions/story';\nimport { fetchStories }  from '../api/story';\n\nfunction* handleFetchStories(action: any) {\n  const { query } = action;\n\n  try {\n    const result = yield call(fetchStories, query);\n    yield put(doAddStories(result.hits));\n  } catch (error) {\n    yield put(doFetchErrorStories(error));\n  }\n}\n\nexport {\n  handleFetchStories,\n};\n","import  { takeEvery, all }  from 'redux-saga/effects';\nimport  { STORIES_FETCH }  from '../constants/actionTypes';\nimport  { handleFetchStories } from './story';\n\nfunction* watchAll() {\n  yield all([\n    takeEvery(STORIES_FETCH, handleFetchStories),\n  ])\n}\n\nexport default watchAll;\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst logger = createLogger();\nconst saga = createSagaMiddleware();\n\n\nconst store = createStore(\n  rootReducer,\n  undefined,\n  applyMiddleware(saga, logger)\n);\n\nsaga.run(rootSaga);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n//import { HashRouter, Route, Switch } from \"react-router-dom\";\n\n\nReactDOM.render(\n  //<HashRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  //</HashRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}